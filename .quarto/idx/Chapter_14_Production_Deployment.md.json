{"title":"Chapter 14: Production Deployment","markdown":{"headingText":"Chapter 14: Production Deployment","containsRefs":false,"markdown":"*From Prototype to Planet-Scale Systems*\n\n## What We'll Learn Today 🎯\n- Building robust, scalable LLM infrastructure\n- Monitoring, observability, and incident response\n- A/B testing and safe deployment practices\n- Security, privacy, and compliance considerations\n- Cost management and capacity planning\n\n**Reality Check:** Making a demo work is 10% of the effort. Making it work for millions of users is the other 90%! 🌍⚖️\n\n---\n\n## 14.1 From Lab to Production: The Journey 🗺️\n\n### The Production Mindset Shift\n\n#### Research vs. Production Priorities\n```\nResearch/Lab Environment:\n🔬 \"Does it work?\" (Proof of concept)\n🔬 Accuracy and novel capabilities\n🔬 Interesting edge cases and failures\n🔬 Publication and academic impact\n🔬 Controlled, clean datasets\n\nProduction Environment:\n🏭 \"Does it work reliably for everyone?\"\n🏭 Availability, scalability, cost\n🏭 Handling all real-world messiness\n🏭 Business impact and user value\n🏭 Dirty, unpredictable user inputs\n```\n\n#### The Reliability Challenge\n```\nResearch demo: Works 95% of the time ✅\nProduction system: Needs 99.9% uptime ✅\n\nThe difference:\n- 95% = 36 hours downtime per month 😱\n- 99.9% = 43 minutes downtime per month 😌\n\nGoing from 95% to 99.9% is often harder than going from 0% to 95%!\n```\n\n### Production Requirements\n\n#### The \"Ilities\" of Production Systems\n```\nReliability: System works correctly under expected conditions\nAvailability: System remains operational over time\nScalability: System handles increasing load gracefully\nMaintainability: System can be updated and fixed easily\nObservability: You can understand what the system is doing\nSecurity: System protects against threats and misuse\n```\n\n#### SLA (Service Level Agreement) Examples\n```\nTypical production SLAs:\n\nAvailability: 99.9% uptime (8.76 hours downtime/year)\nLatency: 95th percentile < 2 seconds\nThroughput: Handle 10,000 requests/minute peak load\nError Rate: < 0.1% of requests fail\nRecovery: Return to service within 1 hour of outage\n\nEach \"9\" of availability gets exponentially harder to achieve! 🎯\n```\n\n---\n\n## 14.2 Infrastructure Architecture Patterns 🏗️\n\n### Microservices Architecture\n\n#### Breaking Down the LLM System\n```\nMonolithic approach:\n[User Request] → [Giant LLM Service] → [Response]\n\nMicroservices approach:\n[User Request] → [Load Balancer] → [Auth Service]\n                                 → [Rate Limiter]\n                                 → [Request Router]\n                                 → [Model Service A/B/C]\n                                 → [Response Cache]\n                                 → [Logging Service]\n                                 → [Response]\n\nBenefits: Independent scaling, easier maintenance, fault isolation\n```\n\n#### Core LLM Services\n```\n1. Authentication & Authorization Service\n   - User verification and API key management\n   - Role-based access control\n   - Usage tracking and billing\n\n2. Request Processing Service  \n   - Input validation and sanitization\n   - Rate limiting and quotas\n   - Request queuing and prioritization\n\n3. Model Inference Service\n   - Actual LLM inference\n   - Model loading and caching\n   - Hardware resource management\n\n4. Response Processing Service\n   - Output filtering and safety checks\n   - Response formatting and streaming\n   - Caching and optimization\n\n5. Monitoring & Logging Service\n   - Metrics collection and analysis\n   - Error tracking and alerting\n   - Performance monitoring\n```\n\n### Load Balancing Strategies\n\n#### Request Distribution Patterns\n```\nRound Robin:\nRequest 1 → Server A\nRequest 2 → Server B  \nRequest 3 → Server C\nRequest 4 → Server A (repeat)\n\nPros: Simple, even distribution\nCons: Doesn't consider server capacity or load\n```\n\n#### Intelligent Load Balancing\n```\nWeighted Round Robin:\n- Assign weights based on server capacity\n- High-spec servers get more requests\n\nLeast Connections:\n- Route to server with fewest active connections\n- Good for long-running requests\n\nResponse Time Based:\n- Route to server with fastest recent response times\n- Adapts to changing performance\n```\n\n#### Geographic Distribution\n```\nGlobal LLM deployment:\n\nUser in US → US East Coast servers (low latency)\nUser in Europe → European servers\nUser in Asia → Asian servers\n\nBenefits:\n✅ Lower latency for users\n✅ Compliance with data residency laws\n✅ Redundancy across regions\n✅ Better disaster recovery\n\nChallenges:\n❌ Model synchronization across regions\n❌ Higher infrastructure costs\n❌ Complex deployment orchestration\n```\n\n### Caching Architectures\n\n#### Multi-Level Caching\n```\nLevel 1: Browser/Client Cache\n- Cache responses for repeated queries\n- Reduce network requests\n\nLevel 2: CDN (Content Delivery Network)\n- Cache at edge locations worldwide\n- Fast access for common responses\n\nLevel 3: Application Cache (Redis/Memcached)\n- Cache processed requests and responses\n- Reduce computation load\n\nLevel 4: Model Cache\n- Cache model activations and KV states\n- Reduce inference computation\n```\n\n#### Intelligent Caching Strategies\n```\nCache Key Design:\nSimple: hash(user_input)\nSmart: hash(normalized_input + model_version + safety_settings)\n\nCache Invalidation:\n- Time-based: Expire after X hours\n- Event-based: Invalidate when model updates\n- Usage-based: LRU (Least Recently Used)\n\nCache Warming:\n- Pre-populate with common queries\n- Use analytics to predict popular requests\n```\n\n---\n\n## 14.3 Monitoring and Observability 📊\n\n### The Three Pillars of Observability\n\n#### Metrics: The Numbers That Matter\n```\nInfrastructure Metrics:\n- CPU, GPU, memory utilization\n- Network bandwidth and latency\n- Disk I/O and storage usage\n- Request queue lengths\n\nApplication Metrics:\n- Requests per second\n- Average response time\n- Error rates by type\n- Model inference latency\n- Cache hit rates\n\nBusiness Metrics:\n- Daily/monthly active users\n- API usage patterns\n- Revenue per request\n- Customer satisfaction scores\n```\n\n#### Logs: The Story of What Happened\n```\nEssential log events:\n- Request received with metadata\n- Authentication and authorization results\n- Model inference start/completion\n- Errors and exceptions with stack traces\n- Performance bottlenecks and warnings\n\nLog structure example:\n{\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"level\": \"INFO\",\n  \"service\": \"model-inference\",\n  \"request_id\": \"req_123456\",\n  \"user_id\": \"user_789\",\n  \"model\": \"gpt-3.5-turbo\",\n  \"latency_ms\": 1250,\n  \"tokens_generated\": 150,\n  \"gpu_utilization\": 85\n}\n```\n\n#### Traces: Following Requests Through the System\n```\nDistributed tracing shows request flow:\n\n[User Request] \n  ├─ [Auth Service] (50ms)\n  ├─ [Rate Limiter] (10ms)  \n  ├─ [Model Router] (20ms)\n  │   ├─ [Model A] (1200ms) ← Main bottleneck\n  │   └─ [Response Cache] (30ms)\n  └─ [Response Formatter] (40ms)\n\nTotal: 1350ms (helps identify where time is spent!)\n```\n\n### Alerting and Incident Response\n\n#### Alert Design Principles\n```\nGood alerts are:\n✅ Actionable: Clear what to do\n✅ Urgent: Require immediate attention  \n✅ Real: Not false positives\n✅ Specific: Include context and details\n\nBad alert: \"High CPU usage\"\nGood alert: \"Model inference service CPU >90% for 5+ minutes, affecting user response times. Check GPU memory usage and request queue.\"\n```\n\n#### Alert Severity Levels\n```\nP0 (Critical): System completely down\n- Page on-call engineer immediately\n- Example: All inference servers crashed\n\nP1 (High): Major degradation\n- Page during business hours, escalate after hours\n- Example: Response time >10 seconds\n\nP2 (Medium): Minor issues\n- Create ticket, review within 4 hours\n- Example: Cache hit rate drops below 50%\n\nP3 (Low): Monitoring/trends\n- Weekly review, no immediate action\n- Example: Gradual increase in error rate\n```\n\n#### Incident Response Playbook\n```\nIncident Response Steps:\n1. DETECT: Monitoring alerts or user reports\n2. ASSESS: Determine severity and impact\n3. MITIGATE: Quick fixes to restore service\n4. INVESTIGATE: Root cause analysis\n5. RESOLVE: Permanent fix\n6. LEARN: Post-mortem and improvements\n\nExample timeline:\n00:00 - Alert: High error rate detected\n00:05 - Engineer investigates and finds GPU memory leak\n00:10 - Mitigation: Restart affected servers\n00:15 - Service restored\n00:30 - Root cause identified: Memory cleanup bug\n01:00 - Permanent fix deployed\nNext day - Post-mortem meeting and process improvements\n```\n\n---\n\n## 14.4 Safe Deployment Practices 🛡️\n\n### Blue-Green Deployments\n\n#### Zero-Downtime Updates\n```\nBlue-Green strategy:\n- Blue environment: Current production (v1.0)\n- Green environment: New version (v1.1)\n\nDeployment process:\n1. Deploy v1.1 to green environment\n2. Test green environment thoroughly\n3. Switch traffic from blue to green\n4. Monitor for issues\n5. Keep blue as rollback option\n\nBenefits:\n✅ Zero downtime\n✅ Easy rollback\n✅ Full testing before switch\n\nChallenges:\n❌ Requires 2x infrastructure\n❌ Database migration complexity\n```\n\n### Canary Deployments\n\n#### Gradual Rollout Strategy\n```\nCanary deployment phases:\n\nPhase 1: 5% of traffic → new version\n- Monitor metrics closely\n- Rollback if issues detected\n\nPhase 2: 25% of traffic → new version\n- Increased confidence\n- More comprehensive testing\n\nPhase 3: 75% of traffic → new version\n- Final validation phase\n\nPhase 4: 100% of traffic → new version\n- Full deployment complete\n\nBenefits:\n✅ Risk mitigation\n✅ Real-world testing\n✅ Early issue detection\n```\n\n#### A/B Testing for Model Updates\n```\nModel A/B testing setup:\n- Route 50% users to Model A (current)\n- Route 50% users to Model B (new)\n- Measure quality and performance metrics\n\nKey metrics to compare:\n- User satisfaction scores\n- Task completion rates\n- Response quality ratings\n- Latency and throughput\n- Error rates\n\nStatistical significance:\n- Run test for sufficient duration\n- Ensure adequate sample sizes\n- Use proper statistical tests\n- Control for confounding variables\n```\n\n### Feature Flags and Circuit Breakers\n\n#### Feature Flags for Safe Rollouts\n```\nFeature flag examples:\n- enable_new_model: Boolean flag\n- max_context_length: Configurable parameter\n- safety_filter_strictness: Adjustable setting\n\nBenefits:\n✅ Enable/disable features without deployment\n✅ Gradual rollout to user segments\n✅ Quick rollback without code changes\n✅ Testing in production with limited exposure\n\nImplementation:\nif feature_flag(\"enable_new_model\", user_id):\n    return new_model.generate(prompt)\nelse:\n    return old_model.generate(prompt)\n```\n\n#### Circuit Breakers for Fault Tolerance\n```\nCircuit breaker pattern:\n- Monitor service health and error rates\n- \"Open\" circuit if failure rate exceeds threshold\n- Route requests to fallback service\n- Periodically test if service has recovered\n\nStates:\nCLOSED: Normal operation, requests pass through\nOPEN: Service failing, requests go to fallback\nHALF-OPEN: Testing if service has recovered\n\nExample:\nif model_service.circuit_breaker.is_open():\n    return fallback_response(\"Service temporarily unavailable\")\nelse:\n    return model_service.generate(prompt)\n```\n\n---\n\n## 14.5 Security and Privacy 🔒\n\n### API Security\n\n#### Authentication and Authorization\n```\nAPI Key Management:\n- Unique keys per customer/application\n- Key rotation policies\n- Rate limiting per key\n- Usage tracking and billing\n\nOAuth 2.0 / JWT Tokens:\n- Secure token-based authentication\n- Granular permission scopes\n- Token expiration and refresh\n- Integration with identity providers\n\nExample API security:\nheaders = {\n    \"Authorization\": \"Bearer jwt_token_here\",\n    \"X-API-Key\": \"api_key_here\"\n}\n\nValidate on server:\n1. Verify JWT signature and expiration\n2. Check API key is valid and active\n3. Confirm user has permission for requested operation\n4. Apply rate limits based on user tier\n```\n\n#### Input Validation and Sanitization\n```\nSecurity threats to guard against:\n- Injection attacks (prompt injection)\n- Malformed input causing crashes\n- Extremely long inputs (DoS attacks)\n- Malicious code in inputs\n\nValidation strategies:\n✅ Maximum input length limits\n✅ Character set restrictions\n✅ Content filtering for malicious patterns\n✅ Rate limiting per user/IP\n✅ Input sanitization and encoding\n\nExample validation:\ndef validate_input(user_input):\n    if len(user_input) > MAX_LENGTH:\n        raise ValueError(\"Input too long\")\n    \n    if contains_malicious_patterns(user_input):\n        raise ValueError(\"Invalid input detected\")\n    \n    return sanitize_text(user_input)\n```\n\n### Data Privacy and Compliance\n\n#### GDPR and Privacy Regulations\n```\nKey requirements:\n- User consent for data processing\n- Right to data deletion\n- Data minimization (collect only what's needed)\n- Data portability\n- Privacy by design\n\nImplementation considerations:\n✅ Don't log sensitive user inputs\n✅ Anonymize or pseudonymize data\n✅ Implement data retention policies\n✅ Provide user data export/deletion\n✅ Regular privacy impact assessments\n```\n\n#### PII (Personally Identifiable Information) Handling\n```\nCommon PII in LLM inputs:\n- Names, addresses, phone numbers\n- Email addresses\n- Social security numbers\n- Credit card numbers\n- Medical information\n\nProtection strategies:\n1. Detection: Use NER models to identify PII\n2. Redaction: Replace with placeholders\n3. Encryption: Encrypt sensitive data at rest\n4. Access controls: Limit who can see raw data\n5. Audit logging: Track access to sensitive data\n\nExample PII redaction:\nInput: \"My name is John Smith and my SSN is 123-45-6789\"\nProcessed: \"My name is [NAME] and my SSN is [SSN]\"\n```\n\n### Content Safety and Moderation\n\n#### Multi-Layer Safety Approach\n```\nLayer 1: Input filtering\n- Block obviously harmful prompts\n- Detect jailbreaking attempts\n- Rate limit suspicious users\n\nLayer 2: Model-level safety\n- Safety-trained models (RLHF)\n- Constitutional AI principles\n- Refusal training for harmful requests\n\nLayer 3: Output filtering\n- Scan generated content for harmful material\n- Block toxic, biased, or inappropriate outputs\n- Flag content for human review\n\nLayer 4: Human oversight\n- Regular auditing of edge cases\n- User reporting mechanisms\n- Continuous safety improvement\n```\n\n---\n\n## 14.6 Cost Management and Capacity Planning 💰\n\n### Cost Monitoring and Optimization\n\n#### Cost Attribution and Tracking\n```\nTrack costs by:\n- Customer/tenant\n- API endpoint\n- Model type and size\n- Geographic region\n- Time of day/week\n\nExample cost breakdown:\nCustomer A:\n- Compute: $1,200/month (GPT-4 usage)\n- Storage: $50/month (conversation history)\n- Bandwidth: $30/month (API calls)\n- Total: $1,280/month\n\nUse this data for:\n✅ Customer billing\n✅ Identifying cost optimization opportunities\n✅ Capacity planning\n✅ Pricing strategy decisions\n```\n\n#### Cost Optimization Strategies\n```\nRight-sizing:\n- Match model size to use case complexity\n- Use smaller models for simple tasks\n- Reserve large models for complex reasoning\n\nAuto-scaling:\n- Scale down during low-usage periods\n- Use spot instances for non-critical workloads\n- Implement predictive scaling based on patterns\n\nResource pooling:\n- Share GPU resources across multiple models\n- Batch similar requests together\n- Optimize for hardware utilization\n```\n\n### Capacity Planning\n\n#### Demand Forecasting\n```\nKey factors affecting demand:\n- Daily/weekly usage patterns\n- Seasonal variations\n- Product launches and marketing\n- Viral content or news events\n\nForecasting methods:\n1. Historical trend analysis\n2. Machine learning prediction models\n3. Business growth projections\n4. External event impact assessment\n\nExample capacity planning:\nCurrent peak: 10,000 RPS\nExpected growth: 50% over 6 months\nSafety margin: 25%\nRequired capacity: 10,000 × 1.5 × 1.25 = 18,750 RPS\n```\n\n#### Scaling Strategies\n```\nVertical scaling (scale up):\n- Upgrade to larger GPU instances\n- Increase memory and storage\n- Faster but limited by hardware constraints\n\nHorizontal scaling (scale out):\n- Add more inference servers\n- Distribute load across regions\n- More complex but unlimited scaling potential\n\nHybrid approach:\n- Use vertical scaling for predictable load\n- Add horizontal scaling for spikes\n- Implement auto-scaling policies\n```\n\n---\n\n## 14.7 Real-World Deployment Case Studies 🌍\n\n### Case Study 1: OpenAI's ChatGPT Launch\n\n#### The Scaling Challenge\n```\nTimeline:\nNovember 2022: ChatGPT launches\nDay 1: 100,000+ users sign up\nWeek 1: Frequent overload and outages\nMonth 1: 100 million monthly users\n\nChallenges faced:\n❌ Underestimated demand by 100x\n❌ GPU shortage and supply chain issues\n❌ Database bottlenecks from user data\n❌ Rate limiting and abuse prevention\n❌ Cost management at massive scale\n\nSolutions implemented:\n✅ Rapid infrastructure scaling (Azure partnership)\n✅ Queue systems for peak load management\n✅ Model optimization and compression\n✅ Geographic distribution of servers\n✅ Plus subscription for revenue and load management\n```\n\n### Case Study 2: Anthropic's Claude Deployment\n\n#### Safety-First Architecture\n```\nUnique requirements:\n- Constitutional AI safety measures\n- Extensive content filtering\n- Conversation memory management\n- Research experiment integration\n\nArchitecture decisions:\n✅ Multi-stage safety checking\n✅ Real-time monitoring for harmful outputs\n✅ A/B testing for safety improvements\n✅ Human feedback collection systems\n✅ Research data collection infrastructure\n\nLessons learned:\n- Safety systems can be performance bottlenecks\n- User education about AI limitations is crucial\n- Balancing safety with user experience\n- Importance of transparent communication\n```\n\n### Case Study 3: Hugging Face's Inference API\n\n#### Multi-Tenant Platform Challenges\n```\nPlatform requirements:\n- Support thousands of different models\n- Serve millions of developers\n- Auto-scaling for variable demand\n- Cost-effective pricing\n\nTechnical solutions:\n✅ Containerized model serving\n✅ Dynamic model loading/unloading\n✅ Sophisticated caching strategies\n✅ Usage-based billing system\n✅ Self-service deployment tools\n\nKey insights:\n- Multi-tenancy adds significant complexity\n- Developer experience is crucial for adoption\n- Observability becomes exponentially important\n- Need robust isolation between customers\n```\n\n---\n\n## 14.8 Deployment Best Practices Checklist ✅\n\n### Pre-Deployment Checklist\n\n#### Technical Readiness\n```\n□ Load testing completed with 2x expected traffic\n□ Monitoring and alerting configured\n□ Security scanning and penetration testing done\n□ Backup and disaster recovery plans tested\n□ Dependencies and third-party services verified\n□ Performance benchmarks established\n□ Error handling and graceful degradation implemented\n□ Documentation updated for operations team\n```\n\n#### Operational Readiness\n```\n□ On-call rotation and escalation procedures defined\n□ Incident response runbooks created\n□ Rollback procedures tested\n□ Team training completed\n□ Support team prepared for user questions\n□ Legal and compliance review completed\n□ Business stakeholder sign-off obtained\n□ Communication plan for launch\n```\n\n### Post-Deployment Monitoring\n\n#### First 24 Hours\n```\nCritical metrics to watch:\n- Error rates and types\n- Response time percentiles\n- Resource utilization trends\n- User feedback and support tickets\n- Security alerts and anomalies\n\nAction items:\n□ Monitor dashboards continuously\n□ Review logs for unusual patterns\n□ Check user feedback channels\n□ Validate billing and usage tracking\n□ Document any issues and resolutions\n```\n\n#### First Week\n```\nExtended monitoring:\n- Performance trend analysis\n- Cost optimization opportunities\n- User behavior patterns\n- A/B test results analysis\n- Security audit results\n\n□ Conduct post-launch retrospective\n□ Update documentation based on learnings\n□ Plan optimization and improvement tasks\n□ Share results with stakeholders\n□ Prepare for next phase of rollout\n```\n\n---\n\n## Key Takeaways 🎯\n\n1. **Production is fundamentally different from research** - reliability, scale, and cost matter as much as accuracy\n\n2. **Observability is crucial** - you need comprehensive monitoring, logging, and tracing to operate successfully\n\n3. **Safety and gradual rollouts reduce risk** - use canary deployments, feature flags, and circuit breakers\n\n4. **Security and privacy can't be afterthoughts** - build in authentication, authorization, and data protection from the start\n\n5. **Cost management requires active monitoring** - track usage patterns and optimize continuously\n\n6. **Team processes matter as much as technology** - incident response, on-call procedures, and documentation are essential\n\n7. **Real-world deployment teaches lessons no textbook can** - be prepared to learn and adapt quickly\n\n---\n\n## Fun Exercises 🎮\n\n### Exercise 1: Incident Response Design\n```\nDesign an incident response plan for this scenario:\n\"Your LLM API is responding with nonsensical outputs for 20% of requests\"\n\nYour plan should include:\n1. How would you detect this issue?\n2. What immediate steps would you take?\n3. How would you investigate the root cause?\n4. What communication would you send to users?\n5. How would you prevent this in the future?\n```\n\n### Exercise 2: Cost Optimization Analysis\n```\nYou're running a customer service LLM with these costs:\n- Large model: $0.02 per 1K tokens, 95% accuracy\n- Small model: $0.005 per 1K tokens, 85% accuracy\n- Current usage: 1M requests/day, 100 tokens average\n\nDesign a cost optimization strategy:\n1. What routing rules would you implement?\n2. What caching strategy would help most?\n3. How would you measure success?\n4. What would be the expected cost savings?\n```\n\n### Exercise 3: Security Assessment\n```\nEvaluate the security of this API endpoint:\n\nPOST /api/v1/generate\nHeaders: X-API-Key: user_key\nBody: {\"prompt\": \"user input\", \"max_tokens\": 100}\n\nIdentify potential security issues and propose solutions:\n1. Authentication and authorization weaknesses\n2. Input validation concerns\n3. Rate limiting needs\n4. Privacy considerations\n```\n\n---\n\n## What's Next? 📚\n\nIn Chapter 15, we'll explore Multimodal LLMs - models that can understand and generate text, images, audio, and more!\n\n**Preview:** We'll learn about:\n- Vision-language models and image understanding\n- Audio processing and speech integration\n- Video analysis and generation\n- Cross-modal reasoning and applications\n\nFrom text-only to multimedia AI! 🎭🖼️🎵\n\n---\n\n## Final Thought 💭\n\n```\n\"Deploying LLMs to production is like conducting a symphony orchestra:\n- Every component must work in harmony\n- One broken instrument can ruin the performance  \n- The conductor (monitoring) must watch everything\n- The audience (users) expects a flawless experience\n- Preparation and practice are everything\n\nWhen done well, it's beautiful. When done poorly, everyone notices.\nThe difference between a demo and a product is in the details!\" 🎼🎯\n```\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":3,"output-file":"Chapter_14_Production_Deployment.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.25","theme":"cosmo","code-copy":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}